<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker基本使用</title>
      <link href="/2019/08/17/docker/"/>
      <url>/2019/08/17/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker描述"><a href="#Docker描述" class="headerlink" title="Docker描述"></a>Docker描述</h1><pre><code>    Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</code></pre><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><pre class=" language-java"><code class="language-java">进入yum目录<span class="token punctuation">[</span>root<span class="token annotation punctuation">@bogon</span> yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token punctuation">]</span>cd <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>下载repo<span class="token punctuation">[</span>root<span class="token annotation punctuation">@bogon</span> yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token punctuation">]</span># wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo<span class="token operator">--</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">--</span>  https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo正在解析主机 mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span><span class="token function">cn</span> <span class="token punctuation">(</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">101.6</span><span class="token punctuation">.</span><span class="token number">8.193</span><span class="token punctuation">,</span> <span class="token number">2402</span><span class="token operator">:</span>f000<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">408</span><span class="token operator">:</span><span class="token number">8100</span><span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span>正在连接 mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span><span class="token function">cn</span> <span class="token punctuation">(</span>mirrors<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">101.6</span><span class="token punctuation">.</span><span class="token number">8.193</span><span class="token operator">|</span><span class="token operator">:</span><span class="token number">443</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 已连接。已发出 HTTP 请求，正在等待回应<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">200</span> OK长度：<span class="token function">2424</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span>4K<span class="token punctuation">)</span> <span class="token punctuation">[</span>application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">]</span>正在保存至<span class="token operator">:</span> “docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo”<span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">424</span>       <span class="token operator">--</span><span class="token punctuation">.</span>-K<span class="token operator">/</span>s 用时 0s      <span class="token number">2019</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token function">14</span> <span class="token punctuation">(</span><span class="token number">262</span> MB<span class="token operator">/</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> 已保存 “docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo” <span class="token punctuation">[</span><span class="token number">2424</span><span class="token operator">/</span><span class="token number">2424</span><span class="token punctuation">]</span><span class="token punctuation">)</span>验证docker<span class="token operator">-</span>ce是否安装成功<span class="token punctuation">[</span>root<span class="token annotation punctuation">@bogon</span> yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token punctuation">]</span># lsCentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo  CentOS<span class="token operator">-</span>Debuginfo<span class="token punctuation">.</span>repo  CentOS<span class="token operator">-</span>Media<span class="token punctuation">.</span>repo    CentOS<span class="token operator">-</span>Vault<span class="token punctuation">.</span>repoCentOS<span class="token operator">-</span>CR<span class="token punctuation">.</span>repo    CentOS<span class="token operator">-</span>fasttrack<span class="token punctuation">.</span>repo  CentOS<span class="token operator">-</span>Sources<span class="token punctuation">.</span>repo  docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo<span class="token punctuation">[</span>root<span class="token annotation punctuation">@bogon</span> yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token punctuation">]</span># yum repolist已加载插件：fastestmirror<span class="token punctuation">,</span> langpacksLoading mirror speeds from cached hostfile <span class="token operator">*</span> base<span class="token operator">:</span> mirrors<span class="token punctuation">.</span>njupt<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn <span class="token operator">*</span> extras<span class="token operator">:</span> mirrors<span class="token punctuation">.</span>cn99<span class="token punctuation">.</span>com <span class="token operator">*</span> updates<span class="token operator">:</span> mirrors<span class="token punctuation">.</span>cn99<span class="token punctuation">.</span>com源标识                                                                源名称                                                                  状态base<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64                                                         CentOS<span class="token operator">-</span><span class="token number">7</span> <span class="token operator">-</span> Base                                                         <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">019</span>docker<span class="token operator">-</span>ce<span class="token operator">-</span>stable<span class="token operator">/</span>x86_64                                               Docker CE Stable <span class="token operator">-</span> x86_64                                                   <span class="token number">52</span>extras<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64                                                       CentOS<span class="token operator">-</span><span class="token number">7</span> <span class="token operator">-</span> Extras                                                          <span class="token number">435</span>updates<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64                                                      CentOS<span class="token operator">-</span><span class="token number">7</span> <span class="token operator">-</span> Updates                                                       <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">500</span>repolist<span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span><span class="token number">006</span><span class="token punctuation">[</span>root<span class="token annotation punctuation">@bogon</span> yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token punctuation">]</span># docker <span class="token operator">--</span>versionDocker version <span class="token number">19.03</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> build 74b1e89</code></pre><h1 id="配置Docker加速器Json"><a href="#配置Docker加速器Json" class="headerlink" title="配置Docker加速器Json"></a>配置Docker加速器Json</h1><pre><code>[root@bogon yum.repos.d]# mkdir /etc/docker/[root@bogon yum.repos.d]# vi /etc/docker/daemon.json 在daemon.json 中添加{  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]}</code></pre><h1 id="测试Docker"><a href="#测试Docker" class="headerlink" title="测试Docker"></a>测试Docker</h1><h3 id="创建一个httpd服务"><a href="#创建一个httpd服务" class="headerlink" title="创建一个httpd服务"></a>创建一个httpd服务</h3><pre><code>获得busybox镜像[root@bogon yum.repos.d]# docker image pull busybox利用busybox创建一个容器[root@bogon yum.repos.d]# docker container run --name myhttpd -it busybox创建httpd工作目录及index.html/ # mkdir /data/html -p/ # vi /data/html/index.html在index.html添加&quot;Hello Docker!&quot;此时此进程处于阻塞状态,然后再启动另一个Shell进程使用docker inspect myhttpd命令查看myhttpd容器的状态信息[root@bogon ~]# docker inspect myhttpd[    {        ...,        ...,        &quot;NetworkSettings&quot;: {            ...,            ...            &quot;Networks&quot;: {                &quot;bridge&quot;: {                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;c28b3cad37536a90abf27043b6b2caa931bcd31ec79b0785d92ee00236a8f575&quot;,                    &quot;EndpointID&quot;: &quot;7dedddc84a36d48c4d6d78773cb571179bd455704cb5c341e6fa43764a2dac0d&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.4&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:04&quot;,                    &quot;DriverOpts&quot;: null                }            }        }    }]在NetworkSettings下的IPAddress可以获得myhttpd的容器虚拟地址为172.17.0.4此时使用curl命令来验证httpd服务是否进行[root@bogon ~]# curl 172.17.0.4Hello Docker!可以观察到myhttpd容器内的httpd服务正常运行</code></pre><h1 id="附-Docker生命周期"><a href="#附-Docker生命周期" class="headerlink" title="附:Docker生命周期"></a>附:Docker生命周期</h1><p><img src="https://raw.githubusercontent.com/lylgjiavg/Blog-image/master/2019-8/20190817-140949.png" alt="docker生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> 容器引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="/2019/08/14/arraylist/"/>
      <url>/2019/08/14/arraylist/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList类继承关系"><a href="#ArrayList类继承关系" class="headerlink" title="ArrayList类继承关系"></a>ArrayList类继承关系</h1><blockquote><p> IDEA使用<em>Ctrl+Shift+Alt+N</em>快捷键查找此类  </p></blockquote><pre><code>ArrayList类继承关系如下图所示:![ArrayList继承关系图](https://i.imgur.com/nTyDgMV.jpg)</code></pre><h1 id="Iterable接口"><a href="#Iterable接口" class="headerlink" title="Iterable接口"></a>Iterable接口</h1><blockquote><p> Implementing this interface allows an object to be the target of the “for-each loop” statement.<br> 即:实现这个接口允许对象成为“for-each循环”语句的目标。<br> 而java.util.Collection接口继承java.lang.Iterable，故标准类库中的任何集合都可以使用for-each循环。</p></blockquote><h3 id="为什么一定要去实现Iterable这个接口呢？-为什么不直接实现Iterator接口呢？"><a href="#为什么一定要去实现Iterable这个接口呢？-为什么不直接实现Iterator接口呢？" class="headerlink" title="为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？"></a>为什么一定要去实现Iterable这个接口呢？ 为什么不直接实现Iterator接口呢？</h3><p>看一下JDK中的集合类，比如List一族或者Set一族，<br>都是继承了Iterable接口，但并不直接继承Iterator接口。<br>仔细想一下这么做是有道理的。因为Iterator接口的核心方法next()或者hasNext()是依赖于迭代器的当前迭代位置的。<br>如果Collection直接继承Iterator接口，势必导致集合对象中包含当前迭代位置的数据(指针)。<br>当集合在不同方法间被传递时，由于当前迭代位置不可预置，那么next()方法的结果会变成不可预知。<br>除非再为Iterator接口添加一个reset()方法，用来重置当前迭代位置。<br>但即时这样，Collection也只能同时存在一个当前迭代位置。<br>而Iterable则不然，每次调用都会返回一个从头开始计数的迭代器。多个迭代器是互不干扰的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2019/07/21/cha-ru-pai-xu-di-gui-er-fen-cha-zhao/"/>
      <url>/2019/07/21/cha-ru-pai-xu-di-gui-er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class=" language-java"><code class="language-java"><span class="token function">leetcode</span><span class="token punctuation">(</span><span class="token number">912</span><span class="token punctuation">)</span><span class="token operator">:</span>    给定一个整数数组 nums，将该数组升序排列。        示例 <span class="token number">1</span>：               输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>        示例 <span class="token number">2</span>：            输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    提示：        <span class="token number">1</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">10000</span>        <span class="token operator">-</span><span class="token number">50000</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">50000</span>    来源：力扣（LeetCode）    链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>an<span class="token operator">-</span>array    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h1><pre class=" language-java"><code class="language-java">    <span class="token punctuation">(</span>稍后总结<span class="token punctuation">)</span></code></pre><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码:"></a>具体代码:</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentInsetIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> currentInsetIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> currentInsetIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// currentInset:当前进行插入的数字</span>            <span class="token keyword">int</span> currentInset <span class="token operator">=</span> nums<span class="token punctuation">[</span>currentInsetIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前进行比较的下标</span>            <span class="token keyword">int</span> currentCompareIndex <span class="token operator">=</span> currentInsetIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 二分查找到正确位置</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> Solution<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currentCompareIndex<span class="token punctuation">,</span> currentInset<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在正确位置进行插入</span>            Solution<span class="token punctuation">.</span><span class="token function">insertNum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currentInsetIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二分查找数值在已排序数组中正确的下标     * @param array 进行查找的数组     * @param lower 查找下界     * @param up 查找上界     * @param num 查找数字     * @return 下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> lowerSearch <span class="token operator">=</span> lower<span class="token punctuation">;</span>        <span class="token keyword">int</span> upSearch <span class="token operator">=</span> up<span class="token punctuation">;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>upSearch <span class="token operator">-</span> lowerSearch<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> lowerSearch<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lowerSearch <span class="token operator">&lt;=</span> upSearch<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>                upSearch <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                lowerSearch <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            middle <span class="token operator">=</span> <span class="token punctuation">(</span>upSearch <span class="token operator">-</span> lowerSearch<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> lowerSearch<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> middle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入值到数组中(数组范围内的一个数插入到本数组的另一个位置)     * @param array 进行插入的数组     * @param lower 插入范围下界     * @param up 插入范围上界(也是要进行插入的值)     * @param index 插入下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">insertNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// unlawfulness</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>up <span class="token operator">&lt;=</span> index <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> lower<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// save a value of insert</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> array<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move inserted value of last to last</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> up<span class="token punctuation">;</span> i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> lower<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// insert value</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h1><pre class=" language-java"><code class="language-java">执行结果：    通过 显示详情    执行用时 <span class="token operator">:</span>        <span class="token number">314</span> ms<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">8.58</span><span class="token operator">%</span>的用户    内存消耗 <span class="token operator">:</span>        <span class="token number">52.1</span> MB<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">100.00</span><span class="token operator">%</span>的用户</code></pre><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析:"></a>结果分析:</h1><pre class=" language-java"><code class="language-java">    本来对这个算法寄予了很大期望<span class="token operator">:</span>        <span class="token number">1</span><span class="token punctuation">.</span>利用二分查找法解决了进行线性查找而需要的线性时间<span class="token punctuation">,</span>进而把查找时间压缩到了<span class="token function">lg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token number">2</span><span class="token punctuation">.</span>利用迭代替换掉递归<span class="token punctuation">,</span>进而解决了在数组长度过大时出现的java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StackOverflowError    对于第一次用算法结合的方式进行排序冷静分析后<span class="token operator">:</span>        <span class="token number">1</span><span class="token punctuation">.</span>对于内存消耗还是很好理解<span class="token punctuation">,</span>原址排序<span class="token punctuation">.</span>        <span class="token number">2</span><span class="token punctuation">.</span>对于执行用时<span class="token punctuation">,</span>虽然用二分查找法代替掉了线性查找<span class="token punctuation">,</span>但还是改变不了算法本身是插入排序<span class="token punctuation">,</span>而对于插入排序最忌惮的就是数组长度<span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序(递归实现)</title>
      <link href="/2019/07/20/cha-ru-pai-xu-di-gui-shi-xian/"/>
      <url>/2019/07/20/cha-ru-pai-xu-di-gui-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class=" language-java"><code class="language-java"><span class="token function">leetcode</span><span class="token punctuation">(</span><span class="token number">912</span><span class="token punctuation">)</span><span class="token operator">:</span>    给定一个整数数组 nums，将该数组升序排列。        示例 <span class="token number">1</span>：               输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>        示例 <span class="token number">2</span>：            输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    提示：        <span class="token number">1</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">10000</span>        <span class="token operator">-</span><span class="token number">50000</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">50000</span>    来源：力扣（LeetCode）    链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>an<span class="token operator">-</span>array    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h1><pre class=" language-java"><code class="language-java">    <span class="token punctuation">(</span>稍后总结<span class="token punctuation">)</span></code></pre><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码:"></a>具体代码:</h1><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 合并</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lower <span class="token operator">&lt;</span> up<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分解</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> up <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解决</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">lineSearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> up <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">insertNum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> up<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 线性查找数值在已排序数组中正确的下标     * @param array 进行查找的数组     * @param lower 查找下界     * @param up 查找上界     * @param num 查找数字     * @return 下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lineSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> up<span class="token punctuation">;</span> i <span class="token operator">>=</span> lower<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lower<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入值到数组中(数组范围内的一个数插入到本数组的另一个位置)     * @param array 进行插入的数组     * @param lower 插入范围下界     * @param up 插入范围上界(也是要进行插入的值)     * @param index 插入下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">insertNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// unlawfulness</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>up <span class="token operator">&lt;=</span> index <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> lower<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// save a value of insert</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> array<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// move inserted value of last to last</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> up<span class="token punctuation">;</span> i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> lower<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// insert value</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h1><pre class=" language-java"><code class="language-java">执行结果：    超出时间限制 显示详情    最后执行的输入：        <span class="token punctuation">[</span><span class="token number">5864</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12333</span><span class="token punctuation">,</span><span class="token number">4151</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6239</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10306</span><span class="token punctuation">,</span><span class="token number">10866</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7013</span><span class="token punctuation">,</span><span class="token number">13195</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8855</span><span class="token punctuation">,</span><span class="token number">1150</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">560</span><span class="token punctuation">,</span><span class="token number">3227</span><span class="token punctuation">,</span><span class="token number">10387</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2329</span><span class="token punctuation">,</span><span class="token number">5169</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19527</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>显示详情<span class="token operator">:</span>    提交记录        <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">10</span> 个通过测试用例        状态：超出时间限制</code></pre><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析:"></a>结果分析:</h1><pre class=" language-java"><code class="language-java">    对于这个结果很诧异也在情理之中<span class="token punctuation">,</span>对于算法本身没有什么问题<span class="token punctuation">,</span>LeetCode应该是检测到消耗的资源和时间太多才会显示这个结果<span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">/</span> <span class="token number">10</span> 个通过测试用例<span class="token punctuation">,</span><span class="token number">1</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50000</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>而本身自己也做了一个测试<span class="token punctuation">,</span>测试代码如下<span class="token operator">:</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    而对于结果则是没有什么问题的<span class="token punctuation">.</span>我在接下来<span class="token punctuation">,</span>则会用二分查找法进行查找要插入的下标<span class="token punctuation">,</span>大大减少查询所用时间<span class="token punctuation">,</span>相信将不会出现超出时间限制这个结果<span class="token punctuation">.</span></code></pre><h1 id="附"><a href="#附" class="headerlink" title="附:"></a>附:</h1><pre class=" language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 插入排序的特点<span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">.</span>对于少量元素的排序<span class="token punctuation">,</span>他是一个有效的算法    <span class="token number">2</span><span class="token punctuation">.</span>原址排序递归和迭代特点<span class="token operator">:</span>    使用场景：        需要重复地多次地计算相同的问题，一般会用到递归和循环。递归：    概念：内部调用函数本身。    使用前提：        在使用递归的时候，必须有一个明确的递归结束条件，称之为递归出口。        使用递归，必须预期收敛。迭代：    通过设置初始条件和结束条件，在一个范围内重复计算。    代码的可读性不如递归，但是效率更高。递归的优点：    <span class="token number">1</span><span class="token punctuation">.</span> 代码简洁；    <span class="token number">2</span><span class="token punctuation">.</span> 在树的前序，中序，后序的遍历算法中，递归的实现比循环简单很多。递归的缺点：    <span class="token number">1</span><span class="token punctuation">.</span> 时间和空间的消耗比较大。        每一个线程都会有一个私有的栈mixed stack，存储java方法的桢栈和<span class="token keyword">native</span>方法的桢栈。每一次方法的调用都涉及到一个桢栈的入栈到出栈。同时，会涉及到分配内存空间，保存参数，返回地址和临时变量，而且往栈里压入数据和弹出都需要时间。    <span class="token number">2</span><span class="token punctuation">.</span> 递归会出现重复计算。        递归的本质是把一个问题分解为多个问题，如果多个问题存在重复计算，有时候这个情况会随着n成指数增长。比如斐波那契的递归就是一个例子。    <span class="token number">3</span><span class="token punctuation">.</span> 递归还有栈溢出的问题，每个线程的栈容量多少有限的。        如果栈内存没有可用空间存储方法桢栈（包括局部变量表，操作数栈，返回地址，动态链接），jvm会抛出java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StackOverFlowError<span class="token punctuation">.</span>        栈的内存远远小于堆内存，<span class="token operator">-</span>Xss选项设置栈内存大小，<span class="token operator">-</span>Xms设置堆开始的大小，<span class="token operator">-</span>Xmx堆最大值<span class="token punctuation">.</span><span class="token punctuation">(</span>ps：如果是堆内存没有可用空间存储生成对象，jvm会抛出java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token punctuation">.</span><span class="token punctuation">)</span>迭代的速度快，那么递归存在的意义呢？       理论上来说，所有的递归函数都可以转换为迭代函数，反之亦然。但是一般来说，代价比较高。       实际上来说，迭代都可以转换为递归，但是递归不一定能转换为迭代。 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 作者：YY_worhol 来源：CSDN 原文：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>YY_worhol<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">83617109</span> 版权声明：本文为博主原创文章，转载请附上博文链接！</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/07/19/gui-bing-pai-xu/"/>
      <url>/2019/07/19/gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class=" language-java"><code class="language-java"><span class="token function">leetcode</span><span class="token punctuation">(</span><span class="token number">912</span><span class="token punctuation">)</span><span class="token operator">:</span>    给定一个整数数组 nums，将该数组升序排列。        示例 <span class="token number">1</span>：               输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>        示例 <span class="token number">2</span>：            输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    提示：        <span class="token number">1</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">10000</span>        <span class="token operator">-</span><span class="token number">50000</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">50000</span>    来源：力扣（LeetCode）    链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>an<span class="token operator">-</span>array    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h1><pre class=" language-java"><code class="language-java">    <span class="token punctuation">(</span>稍后总结：TODO<span class="token punctuation">)</span></code></pre><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码:"></a>具体代码:</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Solution<span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lower <span class="token operator">&lt;</span> up<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> middleLeft <span class="token operator">=</span> <span class="token punctuation">(</span>up <span class="token operator">-</span> lower<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> lower<span class="token punctuation">;</span>            <span class="token keyword">int</span> middleRight <span class="token operator">=</span> middleLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> middleLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middleRight<span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lower<span class="token punctuation">,</span> middleLeft<span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> middle<span class="token punctuation">,</span> <span class="token keyword">int</span> up<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// lower ~ middle</span>        <span class="token keyword">int</span> leftLength <span class="token operator">=</span> middle <span class="token operator">-</span> lower <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// middle+1 ~ up</span>        <span class="token keyword">int</span> rightLength <span class="token operator">=</span> up <span class="token operator">-</span> middle<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// +1是为了在最底层存放一个最大的数字,可以使本数组元素抽取完毕后不断把另一个数组元素抽取</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>leftLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>rightLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leftLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>lower <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rightLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>middle <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        leftArr<span class="token punctuation">[</span>leftLength<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        rightArr<span class="token punctuation">[</span>rightLength<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>up <span class="token operator">-</span> lower <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rightArr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>lower <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> leftArr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>lower <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> rightArr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                r<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h1><pre class=" language-java"><code class="language-java">执行结果：通过 显示详情    执行用时 <span class="token operator">:</span>        <span class="token number">17</span> ms<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">48.93</span><span class="token operator">%</span>的用户    内存消耗 <span class="token operator">:</span>        <span class="token number">50.4</span> MB<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">100.00</span><span class="token operator">%</span>的用户</code></pre><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析:"></a>结果分析:</h1><pre class=" language-java"><code class="language-java">由归并排序的特点<span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">.</span>采用了分治思想，该算法最坏情况运行时间比插入排序（增量方法）要少得多。    <span class="token number">2</span><span class="token punctuation">.</span>归并排序将原问题分解成几个规模较小的但类似于原问题的子问题，递归的求这些子问题，然后合并这些子问题的解来建立原问题的解（这就是分治思想的特点）。分析可得<span class="token operator">:</span>    （稍后分析：TODO）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2019/07/19/cha-ru-pai-xu/"/>
      <url>/2019/07/19/cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><pre class=" language-java"><code class="language-java"><span class="token function">leetcode</span><span class="token punctuation">(</span><span class="token number">912</span><span class="token punctuation">)</span><span class="token operator">:</span>    给定一个整数数组 nums，将该数组升序排列。        示例 <span class="token number">1</span>：               输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>        示例 <span class="token number">2</span>：            输入：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>    提示：        <span class="token number">1</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">10000</span>        <span class="token operator">-</span><span class="token number">50000</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">50000</span>    来源：力扣（LeetCode）    链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>an<span class="token operator">-</span>array    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</code></pre><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h1><pre class=" language-java"><code class="language-java">    <span class="token punctuation">(</span>稍后总结<span class="token punctuation">)</span></code></pre><h1 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码:"></a>具体代码:</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentInsetIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> currentInsetIndex <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> currentInsetIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> currentInset <span class="token operator">=</span> nums<span class="token punctuation">[</span>currentInsetIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currentCompareIndex <span class="token operator">=</span> currentInsetIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>currentCompareIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>currentCompareIndex<span class="token punctuation">]</span> <span class="token operator">></span> currentInset<span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>currentCompareIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>currentCompareIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            currentCompareIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>currentCompareIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> currentInset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h1><pre class=" language-java"><code class="language-java">执行结果：通过 显示详情    执行用时 <span class="token operator">:</span>        <span class="token number">407</span> ms<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">5.04</span><span class="token operator">%</span>的用户    内存消耗 <span class="token operator">:</span>        <span class="token number">51.5</span> MB<span class="token punctuation">,</span> 在所有 Java 提交中击败了<span class="token number">100.00</span><span class="token operator">%</span>的用户</code></pre><h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析:"></a>结果分析:</h1><pre class=" language-java"><code class="language-java">由插入排序的特点<span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">.</span>对于少量元素的排序<span class="token punctuation">,</span>他是一个有效的算法    <span class="token number">2</span><span class="token punctuation">.</span>原址排序分析可得<span class="token operator">:</span>    <span class="token number">1</span><span class="token punctuation">.</span>由于每次插入都需要与前面已经排序好的进行比较<span class="token punctuation">,</span>最坏情况下需要比较n次<span class="token punctuation">(</span>n为每次插入已排序好的数组元素值<span class="token punctuation">)</span><span class="token punctuation">,</span>故对于<span class="token number">10000</span>这个数量的数组大小<span class="token punctuation">,</span>插入排序表现得情况很差<span class="token punctuation">.</span>    <span class="token number">2</span><span class="token punctuation">.</span>由于插入排序进行原址排序<span class="token punctuation">,</span>故内存消耗表现非常完美<span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两两交换链表中的节点(Swap Nodes in Pairs)</title>
      <link href="/2019/06/30/liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-swap-nodes-in-pairs/"/>
      <url>/2019/06/30/liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-swap-nodes-in-pairs/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br>示例:<br>   给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.<br>链表类:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> val<span class="token punctuation">;</span>          ListNode next<span class="token punctuation">;</span>          <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h2><p>注意:在进行交换时:要保证链表的各个部分的引用均不被丢弃.<br><img src="http://img-blog.csdnimg.cn/20190525105831364.png" alt></p></blockquote><blockquote><blockquote><p> <strong>(一般情况)</strong></p><p><strong>情况一(绿色线段表示):当两两交换的链表处于链表的第一和第二位置</strong><br>步骤一:保存奇数节点(节点3)的引用;<br>步骤二:保存偶数节点(节点4)的引用;<br>是步骤四的前提,如果不保存,步骤三过后节点4的引用将被丢弃.<br>(步骤三和步骤四不可调换,否则需要额外的内存(引用)来保存节点5的引用信息)<br>步骤三:节点3.next=节点5;<br>步骤四:节点4.next=节点3;</p></blockquote></blockquote><blockquote><blockquote><p> <strong>(特殊情况)</strong><br><strong>情况二(黑色线段表示):当两两交换的链表不是处于链表的第一和第二位置</strong><br>步骤一:保存奇数节点(节点1)的引用;<br>步骤二:保存偶数节点(节点2)的引用;<br>与情况一不同的是:保存偶数节点的引用为交换后链表的头引用,而不能是情况一的中间变量,否则中间变量在进行<br>下一重循环而重新赋值后,交换后的链表头的引用将被丢弃.<br>(步骤三和步骤四不可调换,否则需要额外的内存(引用)来保存节点3的引用信息)<br>步骤三:节点1.next=节点3;<br>步骤四:节点2.next=节点1;</p></blockquote></blockquote><h2 id="具体代码1"><a href="#具体代码1" class="headerlink" title="具体代码1:"></a>具体代码1:</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 非空验证</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 交换结果链表头引用</span>    ListNode reverse <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前交换位置</span>    ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两两交换的前一链表的引用(使已交换的链表指向刚交换好的链表节点)</span>    ListNode forSwap <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果总链表的节点数为奇数,则最后那个节点就没必要进行交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/********步骤一********/</span>            ListNode odd <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/********步骤二********/</span>            <span class="token comment" spellcheck="true">// 情况一</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                forSwap<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 情况二</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>                reverse <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/********步骤三********/</span>            odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/********步骤四********/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 情况一</span>                forSwap<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 情况二</span>                reverse<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 更新要交换的下两个节点信息</span>            current <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            forSwap <span class="token operator">=</span> odd<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> reverse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  reverse<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><h3 id="在LeetCode运行的结果"><a href="#在LeetCode运行的结果" class="headerlink" title="在LeetCode运行的结果:"></a>在LeetCode运行的结果:</h3><pre><code>成功显示详情 执行用时 : 1 ms, 在Swap Nodes in Pairs的Java提交中击败了94.04% 的用户内存消耗 : 34.1 MB, 在Swap Nodes in Pairs的Java提交中击败了88.92% 的用户来自 &lt;https://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/&gt;  </code></pre></blockquote><h2 id="具体代码2"><a href="#具体代码2" class="headerlink" title="具体代码2:"></a>具体代码2:</h2><p>(思路和代码1相同,只不过两两交换的第二个节点用了额外的变量进行保存,但运行情况却比较代码1好一点,我不明白的是明明引用少了一个,为什么内存消耗为什么反而减小?初学算法,请多多指教)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 非空验证</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode reverse <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode forSwap <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/********步骤一********/</span>                ListNode odd <span class="token operator">=</span> current<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/********步骤二********/</span>                ListNode even <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>                    reverse <span class="token operator">=</span> even<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/********步骤三********/</span>                odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/********步骤四********/</span>                even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 链接到已交换的链表后</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    forSwap<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                current <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                forSwap <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> reverse<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><h3 id="在LeetCode运行的结果-1"><a href="#在LeetCode运行的结果-1" class="headerlink" title="在LeetCode运行的结果:"></a>在LeetCode运行的结果:</h3><pre><code>成功显示详情 执行用时 : 1 ms, 在Swap Nodes in Pairs的Java提交中击败了94.04% 的用户    内存消耗 : 33.9 MB, 在Swap Nodes in Pairs的Java提交中击败了90.90% 的用户来自 [LeetCode](https://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/)      </code></pre><p>附:不知道LeetCode运行时会不会受到当时服务器的速度影响,还是LeetCode针对提交的代码有一套自己对时间复杂度和空间复杂度有一套自己的算法,总感觉提交后有些许不同.​​</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于腾讯云的COS存储静态资源</title>
      <link href="/2019/06/30/ji-yu-teng-xun-yun-de-cos-cun-chu-jing-tai-zi-yuan/"/>
      <url>/2019/06/30/ji-yu-teng-xun-yun-de-cos-cun-chu-jing-tai-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="对象存储-COS-简介"><a href="#对象存储-COS-简介" class="headerlink" title="对象存储 COS 简介"></a>对象存储 COS 简介</h2><blockquote><p><em><u>对象存储（Cloud Object Storage，COS）</u>是由腾讯云推出的无目录层次结构、无数据格式限制，可容纳海量数据且支持 HTTP/HTTPS 协议访问的分布式存储服务。腾讯云 COS 的存储桶空间无容量上限，无需分区.管理，适用于 CDN 数据分发、数据万象处理或大数据计算与分析的数据湖等多种场景。COS 提供网页端管理界面、多种主流开发语言的 SDK、API 以及命令行和图形化工具，并且兼容 S3 的 API 接口，方便用户直接使用社区工具和插件。</em></p></blockquote><h2 id="COS作用"><a href="#COS作用" class="headerlink" title="COS作用"></a>COS作用</h2><p>可以利用对象存储（Cloud Object Storage，COS）来管理我们的博客静态资源,如图片、音乐、以及html、css、js等。个人主要利用COS来管理图片、音乐文件,因为自己博客是发布在GitHub上,所以访问速度受限,而把这些静态文件存储在COS服务上则可以加快博客的加载速度.</p><h2 id="利用腾讯云的COS管理静态资源步骤："><a href="#利用腾讯云的COS管理静态资源步骤：" class="headerlink" title="利用腾讯云的COS管理静态资源步骤："></a>利用腾讯云的COS管理静态资源步骤：</h2><blockquote><h3 id="1-注册腾讯云账户"><a href="#1-注册腾讯云账户" class="headerlink" title="1.注册腾讯云账户"></a>1.注册腾讯云账户</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>注册腾讯云并使用COS服务是完全免费的,其中,注册地址为:<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a>.  </p></blockquote><blockquote><h3 id="2-申请COS服务"><a href="#2-申请COS服务" class="headerlink" title="2.申请COS服务"></a>2.申请COS服务</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>申请COS服务地址为:<a href="https://cloud.tencent.com/product/cos" target="_blank" rel="noopener">COS申请</a>  </p></blockquote><blockquote><h3 id="3-创建存储桶"><a href="#3-创建存储桶" class="headerlink" title="3.创建存储桶"></a>3.创建存储桶</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>在进入步骤2网址后点击立即使用(个人开发不用购买资源包,使用免费的可以).然后创建储存桶,如下图所示.<br><img src="http://img-blog.csdnimg.cn/20190704171312812.png" alt><br>必填项为:名称<br><em>注意:访问权限为:公有读私有写(如是默认的私有读写,则博客无法引用静态资源)</em>  </p></blockquote><blockquote><h3 id="4-在存储桶创建文件夹并上传文件"><a href="#4-在存储桶创建文件夹并上传文件" class="headerlink" title="4.在存储桶创建文件夹并上传文件"></a>4.在存储桶创建文件夹并上传文件</h3><p><img src="http://img-blog.csdnimg.cn/20190704171345334.png" alt></p></blockquote><blockquote><h3 id="5-进行基础配置"><a href="#5-进行基础配置" class="headerlink" title="5.进行基础配置"></a>5.进行基础配置</h3><p><img src="http://img-blog.csdnimg.cn/20190704171406958.png" alt><br>点击基础配置项<br><strong>把静态网站的开关使处于<u>开</u>的状态.</strong>其中,索引文件不用在意,点击保存.</p></blockquote><blockquote><h3 id="6-通过COS服务访问静态文件"><a href="#6-通过COS服务访问静态文件" class="headerlink" title="6.通过COS服务访问静态文件"></a>6.通过COS服务访问静态文件</h3><p><img src="http://img-blog.csdnimg.cn/20190704171417246.png" alt><br>点击已上传的静态资源的详情项,便进入静态资源的信息页面,此时就可以Copy对象地址属性值,引用到你的博客中,完成显示.</p></blockquote><h2 id="附加"><a href="#附加" class="headerlink" title="附加:"></a>附加:</h2><h3 id="腾讯云COS官方应用场景"><a href="#腾讯云COS官方应用场景" class="headerlink" title="腾讯云COS官方应用场景"></a>腾讯云COS官方应用场景</h3><blockquote><p>####1.应用数据存储</p><blockquote><p>无论是手机 APP、网站，或 HTML5 页面，对象存储可根据应用程序类型提供各语言 SDK，实现无缝接入。当业务爆发、用户产生内容（UGC）突增时，对象存储将根据请求和流量的需求自动扩展，从容应对业务突发访问状况。由于 UGC 通常具有时间维度级的访问特征，对象存储可将数据冷热分层，热数据使用标准存储，冷数据使用低频存储。配合生命周期规则配置，转换存储类别，有效降低存储成本。</p></blockquote><p>####2.数据处理</p><blockquote><p>对于用户传入 COS 的数据，COS 可结合腾讯云多种数据处理类产品对其进行编辑、处理和审核操作，针对图片数据，用户可结合 数据万象 对其进行裁剪、缩放、转码、锐化、添加水印等处理操作，还可以进行鉴黄、鉴政、鉴暴恐等内容审核；针对视频数据，用户可使用视频处理对其进行转码、水印、截帧等处理；针对文档数据，用户可利用数据万象生成文档的图片或 HTML 预览，并可对预览图添加水印。</p></blockquote><p>####3.内容分发</p><blockquote><p>网站服务通常会在动态网页中，根据一定规则将经常变动和长期不变的资源区分开，静态资源就是指长期不变的非结构化数据资源。<br>标准存储提供了静态资源的存储和分发能力，减轻资源服务器的压力，并利用无限容量、高频读写的特性，为静态资源提供可扩展和可靠的存储。用户可以将网站中的静态内容（包括音视频、图片等文件）全部托管在标准存储中，并利用腾讯云 CDN 分发内容。结合腾讯云 CDN 全球加速节点的能力，可以将热点文件提前下发至边缘节点，降低访问延迟。</p></blockquote><p>####4.大数据分析</p><blockquote><p>无论用户存储的是医疗或财务方面的数据还是照片和音视频之类的多媒体文件，COS 都可以作为数据源进行大数据分析。<br>对象存储支持存储 EB 级别非结构化数据，高可用、高可靠、高安全和可扩展性，结合使用腾讯云大数据套件，快速构建和部署分析应用程序。在高性能计算需求完成后，可以将数据转换为归档存储，降低服务使用成本，以便长期存储数据。</p></blockquote><p>####5.容灾及备份</p><blockquote><p>用户放在对象存储上的数据可以通过跨区域复制功能同时存储在多个指定区域，保证在某些意外丢失部分数据的情况下仍能通过冗余数据来查找并恢复完整数据，同时，因为多份数据存放在不同的地区，因此能避免一个地区的存储受到不可抗逆灾难时会造成的损失，从而达到多冗余备份和异地容灾的效果，保证数据的持久性和稳定性，为重要数据加上多重保险。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/29/hello-world/"/>
      <url>/2019/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
