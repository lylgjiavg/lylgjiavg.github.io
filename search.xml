<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>两两交换链表中的节点(Swap Nodes in Pairs)</title>
      <link href="/2019/06/30/liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-swap-nodes-in-pairs/"/>
      <url>/2019/06/30/liang-liang-jiao-huan-lian-biao-zhong-de-jie-dian-swap-nodes-in-pairs/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。<br>示例:<br>   给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.<br>链表类:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> val<span class="token punctuation">;</span>          ListNode next<span class="token punctuation">;</span>          <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h2><blockquote><p>注意:在进行交换时:要保证链表的各个部分的引用均不被丢弃.</p><p> <strong>(一般情况)</strong></p><p>情况一(绿色线段表示):当两两交换的链表处于链表的第一和第二位置<br>步骤一:保存奇数节点(节点3)的引用;<br>步骤二:保存偶数节点(节点4)的引用;<br>是步骤四的前提,如果不保存,步骤三过后节点4的引用将被丢弃.<br>(步骤三和步骤四不可调换,否则需要额外的内存(引用)来保存节点5的引用信息)<br>步骤三:节点3.next=节点5;<br>步骤四:节点4.next=节点3;</p></blockquote></blockquote><blockquote><blockquote><p> <strong>(特殊情况)</strong><br>情况二(黑色线段表示):当两两交换的链表不是处于链表的第一和第二位置<br>步骤一:保存奇数节点(节点1)的引用;<br>步骤二:保存偶数节点(节点2)的引用;<br>与情况一不同的是:保存偶数节点的引用为交换后链表的头引用,而不能是情况一的中间变量,否则中间变量在进行<br>下一重循环而重新赋值后,交换后的链表头的引用将被丢弃.<br>(步骤三和步骤四不可调换,否则需要额外的内存(引用)来保存节点3的引用信息)<br>步骤三:节点1.next=节点3;<br>步骤四:节点2.next=节点1;</p></blockquote></blockquote><h2 id="具体代码1"><a href="#具体代码1" class="headerlink" title="具体代码1:"></a>具体代码1:</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 非空验证</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 交换结果链表头引用</span>    ListNode reverse <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前交换位置</span>    ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 两两交换的前一链表的引用(使已交换的链表指向刚交换好的链表节点)</span>    ListNode forSwap <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果总链表的节点数为奇数,则最后那个节点就没必要进行交换</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/********步骤一********/</span>            ListNode odd <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/********步骤二********/</span>            <span class="token comment" spellcheck="true">// 情况一</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                forSwap<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 情况二</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>                reverse <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/********步骤三********/</span>            odd<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/********步骤四********/</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 情况一</span>                forSwap<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 情况二</span>                reverse<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 更新要交换的下两个节点信息</span>            current <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            forSwap <span class="token operator">=</span> odd<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> reverse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  reverse<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><h3 id="在LeetCode运行的结果"><a href="#在LeetCode运行的结果" class="headerlink" title="在LeetCode运行的结果:"></a>在LeetCode运行的结果:</h3><pre><code>成功显示详情 执行用时 : 1 ms, 在Swap Nodes in Pairs的Java提交中击败了94.04% 的用户内存消耗 : 34.1 MB, 在Swap Nodes in Pairs的Java提交中击败了88.92% 的用户来自 &lt;https://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/&gt;  </code></pre></blockquote><h2 id="具体代码2"><a href="#具体代码2" class="headerlink" title="具体代码2:"></a>具体代码2:</h2><p>(思路和代码1相同,只不过两两交换的第二个节点用了额外的变量进行保存,但运行情况却比较代码1好一点,我不明白的是明明引用少了一个,为什么内存消耗为什么反而减小?初学算法,请多多指教)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 非空验证</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode reverse <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode forSwap <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/********步骤一********/</span>                ListNode odd <span class="token operator">=</span> current<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/********步骤二********/</span>                ListNode even <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>                    reverse <span class="token operator">=</span> even<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/********步骤三********/</span>                odd<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/********步骤四********/</span>                even<span class="token punctuation">.</span>next <span class="token operator">=</span> odd<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 链接到已交换的链表后</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>forSwap <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    forSwap<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                current <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                forSwap <span class="token operator">=</span> odd<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> reverse<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><h3 id="在LeetCode运行的结果-1"><a href="#在LeetCode运行的结果-1" class="headerlink" title="在LeetCode运行的结果:"></a>在LeetCode运行的结果:</h3><pre><code>成功显示详情 执行用时 : 1 ms, 在Swap Nodes in Pairs的Java提交中击败了94.04% 的用户    内存消耗 : 33.9 MB, 在Swap Nodes in Pairs的Java提交中击败了90.90% 的用户来自 [LeetCode](https://leetcode-cn.com/problems/swap-nodes-in-pairs/submissions/)      </code></pre><p>附:不知道LeetCode运行时会不会受到当时服务器的速度影响,还是LeetCode针对提交的代码有一套自己对时间复杂度和空间复杂度有一套自己的算法,总感觉提交后有些许不同.​​</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于腾讯云的COS存储静态资源</title>
      <link href="/2019/06/30/ji-yu-teng-xun-yun-de-cos-cun-chu-jing-tai-zi-yuan/"/>
      <url>/2019/06/30/ji-yu-teng-xun-yun-de-cos-cun-chu-jing-tai-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="对象存储-COS-简介"><a href="#对象存储-COS-简介" class="headerlink" title="对象存储 COS 简介"></a>对象存储 COS 简介</h2><blockquote><p><em><u>对象存储（Cloud Object Storage，COS）</u>是由腾讯云推出的无目录层次结构、无数据格式限制，可容纳海量数据且支持 HTTP/HTTPS 协议访问的分布式存储服务。腾讯云 COS 的存储桶空间无容量上限，无需分区.管理，适用于 CDN 数据分发、数据万象处理或大数据计算与分析的数据湖等多种场景。COS 提供网页端管理界面、多种主流开发语言的 SDK、API 以及命令行和图形化工具，并且兼容 S3 的 API 接口，方便用户直接使用社区工具和插件。</em></p></blockquote><h2 id="COS作用"><a href="#COS作用" class="headerlink" title="COS作用"></a>COS作用</h2><p>可以利用对象存储（Cloud Object Storage，COS）来管理我们的博客静态资源,如图片、音乐、以及html、css、js等。个人主要利用COS来管理图片、音乐文件,因为自己博客是发布在GitHub上,所以访问速度受限,而把这些静态文件存储在COS服务上则可以加快博客的加载速度.</p><h2 id="利用腾讯云的COS管理静态资源步骤："><a href="#利用腾讯云的COS管理静态资源步骤：" class="headerlink" title="利用腾讯云的COS管理静态资源步骤："></a>利用腾讯云的COS管理静态资源步骤：</h2><blockquote><h3 id="1-注册腾讯云账户"><a href="#1-注册腾讯云账户" class="headerlink" title="1.注册腾讯云账户"></a>1.注册腾讯云账户</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>注册腾讯云并使用COS服务是完全免费的,其中,注册地址为:<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a>.  </p></blockquote><blockquote><h3 id="2-申请COS服务"><a href="#2-申请COS服务" class="headerlink" title="2.申请COS服务"></a>2.申请COS服务</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>申请COS服务地址为:<a href="https://cloud.tencent.com/product/cos" target="_blank" rel="noopener">COS申请</a>  </p></blockquote><blockquote><h3 id="3-创建存储桶"><a href="#3-创建存储桶" class="headerlink" title="3.创建存储桶"></a>3.创建存储桶</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<br>在进入步骤2网址后点击立即使用(个人开发不用购买资源包,使用免费的可以).然后创建储存桶,如下图所示.<br><img src="https://blog-static-1255761885.cos.ap-chengdu.myqcloud.com/image/2019-6-30/2019-06-30_103715.png" alt=" &quot;创建储存桶&quot;"><br>必填项为:名称<br><em>注意:访问权限为:公有读私有写(如是默认的私有读写,则博客无法引用静态资源)</em>  </p></blockquote><blockquote><h3 id="4-在存储桶创建文件夹并上传文件"><a href="#4-在存储桶创建文件夹并上传文件" class="headerlink" title="4.在存储桶创建文件夹并上传文件"></a>4.在存储桶创建文件夹并上传文件</h3><p><img src="https://blog-static-1255761885.cos.ap-chengdu.myqcloud.com/image/2019-6-30/2019-06-30_104427.png" alt=" &quot;创建文件夹&quot;">  </p></blockquote><blockquote><h3 id="5-进行基础配置"><a href="#5-进行基础配置" class="headerlink" title="5.进行基础配置"></a>5.进行基础配置</h3><p><img src="https://blog-static-1255761885.cos.ap-chengdu.myqcloud.com/image/2019-6-30/2019-06-30_104510.png" alt=" &quot;基础配置&quot;"><br>点击基础配置项<br><strong>把静态网站的开关使处于<u>开</u>的状态.</strong>其中,索引文件不用在意,点击保存.</p></blockquote><blockquote><h3 id="6-通过COS服务访问静态文件"><a href="#6-通过COS服务访问静态文件" class="headerlink" title="6.通过COS服务访问静态文件"></a>6.通过COS服务访问静态文件</h3><p><img src="https://blog-static-1255761885.cos.ap-chengdu.myqcloud.com/image/2019-6-30/2019-06-30_104553.png" alt=" &quot;访问静态文件&quot;"><br>点击已上传的静态资源的详情项,便进入静态资源的信息页面,此时就可以Copy对象地址属性值,引用到你的博客中,完成显示.</p></blockquote><h2 id="附加"><a href="#附加" class="headerlink" title="附加:"></a>附加:</h2><h3 id="腾讯云COS官方应用场景"><a href="#腾讯云COS官方应用场景" class="headerlink" title="腾讯云COS官方应用场景"></a>腾讯云COS官方应用场景</h3><blockquote><p>####1.应用数据存储</p><blockquote><p>无论是手机 APP、网站，或 HTML5 页面，对象存储可根据应用程序类型提供各语言 SDK，实现无缝接入。当业务爆发、用户产生内容（UGC）突增时，对象存储将根据请求和流量的需求自动扩展，从容应对业务突发访问状况。由于 UGC 通常具有时间维度级的访问特征，对象存储可将数据冷热分层，热数据使用标准存储，冷数据使用低频存储。配合生命周期规则配置，转换存储类别，有效降低存储成本。</p></blockquote><p>####2.数据处理</p><blockquote><p>对于用户传入 COS 的数据，COS 可结合腾讯云多种数据处理类产品对其进行编辑、处理和审核操作，针对图片数据，用户可结合 数据万象 对其进行裁剪、缩放、转码、锐化、添加水印等处理操作，还可以进行鉴黄、鉴政、鉴暴恐等内容审核；针对视频数据，用户可使用视频处理对其进行转码、水印、截帧等处理；针对文档数据，用户可利用数据万象生成文档的图片或 HTML 预览，并可对预览图添加水印。</p></blockquote><p>####3.内容分发</p><blockquote><p>网站服务通常会在动态网页中，根据一定规则将经常变动和长期不变的资源区分开，静态资源就是指长期不变的非结构化数据资源。<br>标准存储提供了静态资源的存储和分发能力，减轻资源服务器的压力，并利用无限容量、高频读写的特性，为静态资源提供可扩展和可靠的存储。用户可以将网站中的静态内容（包括音视频、图片等文件）全部托管在标准存储中，并利用腾讯云 CDN 分发内容。结合腾讯云 CDN 全球加速节点的能力，可以将热点文件提前下发至边缘节点，降低访问延迟。</p></blockquote><p>####4.大数据分析</p><blockquote><p>无论用户存储的是医疗或财务方面的数据还是照片和音视频之类的多媒体文件，COS 都可以作为数据源进行大数据分析。<br>对象存储支持存储 EB 级别非结构化数据，高可用、高可靠、高安全和可扩展性，结合使用腾讯云大数据套件，快速构建和部署分析应用程序。在高性能计算需求完成后，可以将数据转换为归档存储，降低服务使用成本，以便长期存储数据。</p></blockquote><p>####5.容灾及备份</p><blockquote><p>用户放在对象存储上的数据可以通过跨区域复制功能同时存储在多个指定区域，保证在某些意外丢失部分数据的情况下仍能通过冗余数据来查找并恢复完整数据，同时，因为多份数据存放在不同的地区，因此能避免一个地区的存储受到不可抗逆灾难时会造成的损失，从而达到多冗余备份和异地容灾的效果，保证数据的持久性和稳定性，为重要数据加上多重保险。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码段测试</title>
      <link href="/2019/06/30/dai-ma-duan-ce-shi/"/>
      <url>/2019/06/30/dai-ma-duan-ce-shi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmsPage</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 页面名称、别名、访问地址、类型（静态/动态）、页面模版、状态         */</span>        <span class="token comment" spellcheck="true">//站点ID</span>        <span class="token keyword">private</span> String siteId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//页面ID</span>        <span class="token annotation punctuation">@Id</span>        <span class="token keyword">private</span> String pageId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//页面名称</span>        <span class="token keyword">private</span> String pageName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//别名</span>        <span class="token keyword">private</span> String pageAliase<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问地址</span>        <span class="token keyword">private</span> String pageWebPath<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数</span>        <span class="token keyword">private</span> String pageParameter<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//物理路径</span>        <span class="token keyword">private</span> String pagePhysicalPath<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//类型（静态/动态）</span>        <span class="token keyword">private</span> String pageType<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//页面模版</span>        <span class="token keyword">private</span> String pageTemplate<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//页面静态化内容</span>        <span class="token keyword">private</span> String pageHtml<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//状态</span>        <span class="token keyword">private</span> String pageStatus<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建时间</span>        <span class="token keyword">private</span> Date pageCreateTime<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模版id</span>        <span class="token keyword">private</span> String templateId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//参数列表</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>CmsPageParam<span class="token operator">></span> pageParams<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模版文件Id</span>        <span class="token comment" spellcheck="true">//    private String templateFileId;</span>        <span class="token comment" spellcheck="true">//静态文件Id</span>        <span class="token keyword">private</span> String htmlFileId<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据Url</span>        <span class="token keyword">private</span> String dataUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COS图片文件访问</title>
      <link href="/2019/06/30/ce-shi-cos-jing-tai-zi-yuan/"/>
      <url>/2019/06/30/ce-shi-cos-jing-tai-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="测试COS"><a href="#测试COS" class="headerlink" title="测试COS"></a>测试COS</h2><p><img src="https://blog-static-1255761885.cos.ap-chengdu.myqcloud.com/image/a6f63d74ab6c3c1e735f0ca1e6010592.jpg" alt="RUNOOB 图标"></p><h2 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h2>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> COS图片文件访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/29/hello-world/"/>
      <url>/2019/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
